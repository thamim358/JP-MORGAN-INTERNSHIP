From 7e1b5b3e5097c41b46e456f2560c5fa54b08f7ea Mon Sep 17 00:00:00 2001
From: thamim358 <thamimansari358@gmail.com>
Date: Fri, 6 Oct 2023 18:55:13 +0530
Subject: [PATCH] Interface with a stock price data feed and set up your system
 for analysis of the data

---
 client3.py | 29 +++++++++++++++++++++--------
 1 file changed, 21 insertions(+), 8 deletions(-)

diff --git a/client3.py b/client3.py
index 3fc09b7..a7e2a17 100644
--- a/client3.py
+++ b/client3.py
@@ -25,24 +25,28 @@ import urllib.request
 # Server API URLs
 QUERY = "http://localhost:8080/query?id={}"
 
-# 500 server request
+# 500 server requests
 N = 500
 
+# Initialize a dictionary to store stock prices
+prices = {}
+
 
 def getDataPoint(quote):
     """ Produce all the needed values to generate a datapoint """
-    """ ------------- Update this function ------------- """
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    # Calculate the average price using bid_price and ask_price
+    price = (bid_price + ask_price) / 2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
-    """ ------------- Update this function ------------- """
-    return 1
+    if price_b == 0:
+        return 0  # Avoid division by zero
+    return price_a / price_b
 
 
 # Main
@@ -50,10 +54,19 @@ if __name__ == "__main__":
     # Query the price once every N seconds.
     for _ in iter(range(N)):
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+        ratios = {}  # Dictionary to store stock price ratios
 
-        """ ----------- Update to get the ratio --------------- """
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
-            print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+            prices[stock] = price  # Update prices dictionary with the latest price
+            ratios[stock] = price  # Initialize ratios with the current price
+
+        for stock_a in prices:
+            for stock_b in prices:
+                if stock_a != stock_b:
+                    # Calculate the ratio between stock_a and stock_b
+                    ratios[stock_a] = getRatio(prices[stock_a], prices[stock_b])
 
-        print("Ratio %s" % getRatio(price, price))
+        # Print the ratios
+        for stock, ratio in ratios.items():
+            print("Ratio {}: {}".format(stock, ratio))
-- 
2.36.1.windows.1

